name: Build and Deploy Nostr Relay

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          command_timeout: 20m
          script: |
            # Create and navigate to deploy directory
            mkdir -p /home/nostrarabia/nostr-relay
            cd /home/nostrarabia/nostr-relay

            # Clone or update repo
            if [ ! -d .git ]; then
              # Remove any existing files if directory exists but no git repo
              rm -rf * .[!.]* 2>/dev/null || true
              git clone https://github.com/tkhumush/nostrarabiarelay.git .
            else
              git fetch origin
              git reset --hard origin/main
              git pull origin main
            fi

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Set environment variables for docker compose
            export BLOSSOM_ADMIN_PASSWORD="${{ secrets.BLOSSOM_ADMIN_PASSWORD }}"

            # Pull only the nostr-relay image (changes frequently from CI)
            # Base images (caddy, blossom) rarely change and will use cached versions
            docker compose pull nostr-relay

            # Stop and remove old nginx/certbot containers (migrated to Caddy)
            echo "Stopping old nginx/certbot containers..."
            docker stop nginx-proxy certbot 2>/dev/null || true
            docker rm nginx-proxy certbot 2>/dev/null || true

            # Remove old volumes (optional - keeps old certs if you want to migrate)
            # docker volume rm nostr-relay_certbot-conf nostr-relay_certbot-www 2>/dev/null || true

            # Clean up old nginx config files
            # Keep nginx/html for static files served by Caddy
            echo "Cleaning up old nginx config files..."
            rm -rf ./nginx/conf.d ./nginx/conf.d-http-only ./nginx/conf.d-backup ./nginx/ssl 2>/dev/null || true

            # Start all services (Caddy handles SSL automatically)
            echo "Starting services..."
            docker compose up -d --remove-orphans

            # Wait for Caddy to obtain SSL certificates and start serving
            echo "Waiting for Caddy to obtain SSL certificates..."
            echo "This may take 30-60 seconds on first deployment."
            sleep 30

            # Verify Caddy is running
            if ! docker compose ps caddy | grep -q "Up"; then
              echo "Caddy failed to start!"
              docker compose logs caddy
              exit 1
            fi

            echo "Deployment complete! Caddy has automatically obtained SSL certificates."
            echo "Services are now running with HTTPS at:"
            echo "  - https://nostrarabia.com"
            echo "  - https://relay.nostrarabia.com (wss://)"
            echo "  - https://media.nostrarabia.com"
