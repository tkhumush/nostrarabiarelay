name: Build and Deploy Nostr Relay

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          command_timeout: 20m
          script: |
            # Create and navigate to deploy directory
            mkdir -p /home/nostrarabia/nostr-relay
            cd /home/nostrarabia/nostr-relay

            # Clone or update repo
            if [ ! -d .git ]; then
              # Remove any existing files if directory exists but no git repo
              rm -rf * .[!.]* 2>/dev/null || true
              git clone https://github.com/tkhumush/nostrarabiarelay.git .
            else
              git fetch origin
              git reset --hard origin/main
              git pull origin main
            fi

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest image (using docker-compose with hyphen)
            docker-compose pull

            # Deploy with docker-compose
            docker-compose up -d

            # Setup Nginx
            echo "Setting up nginx..."

            # Install nginx if not already installed
            if ! command -v nginx &> /dev/null; then
              sudo apt update
              sudo apt install -y nginx
            fi

            # Copy nginx config
            sudo cp nginx.conf /etc/nginx/sites-available/nostr-relay

            # Enable site
            sudo ln -sf /etc/nginx/sites-available/nostr-relay /etc/nginx/sites-enabled/

            # Remove default site
            sudo rm -f /etc/nginx/sites-enabled/default

            # Test nginx config
            sudo nginx -t

            # Reload nginx
            sudo systemctl reload nginx

            # Enable nginx to start on boot
            sudo systemctl enable nginx

            # Configure firewall
            sudo ufw allow 80/tcp
            sudo ufw allow 443/tcp
            sudo ufw allow 22/tcp

            # Setup SSL with Certbot
            echo "Setting up SSL certificate..."

            # Install certbot if not already installed
            if ! command -v certbot &> /dev/null; then
              sudo apt install -y certbot python3-certbot-nginx
            fi

            # Get SSL certificate (only if not already exists)
            if [ ! -d /etc/letsencrypt/live/strfry.nostrarabia.com ]; then
              sudo certbot --nginx -d strfry.nostrarabia.com --non-interactive --agree-tos --email admin@nostrarabia.com --redirect
              echo "SSL certificate obtained successfully!"
            else
              echo "SSL certificate already exists, skipping..."
            fi

            # Show logs
            docker-compose logs --tail=50

            echo "Deployment complete!"
            echo "Relay accessible at: wss://strfry.nostrarabia.com"
