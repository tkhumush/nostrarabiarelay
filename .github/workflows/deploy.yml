name: Build and Deploy Nostr Relay

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          command_timeout: 20m
          script: |
            # Create and navigate to deploy directory
            mkdir -p /home/nostrarabia/nostr-relay
            cd /home/nostrarabia/nostr-relay

            # Clone or update repo
            if [ ! -d .git ]; then
              # Remove any existing files if directory exists but no git repo
              rm -rf * .[!.]* 2>/dev/null || true
              git clone https://github.com/tkhumush/nostrarabiarelay.git .
            else
              git fetch origin
              git reset --hard origin/main
              git pull origin main
            fi

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Set environment variables for docker compose
            export BLOSSOM_ADMIN_PASSWORD="${{ secrets.BLOSSOM_ADMIN_PASSWORD }}"

            # Pull only the nostr-relay image (changes frequently from CI)
            # Base images (nginx, certbot, blossom) rarely change and will use cached versions
            docker compose pull nostr-relay

            # Start all services (nginx will serve ACME challenges on HTTP)
            echo "Starting services..."
            docker compose up -d

            # Wait for nginx to be ready to serve ACME challenges
            echo "Waiting for nginx to start..."
            sleep 5

            # Check if SSL certificates exist and generate if needed
            # Use webroot mode - nginx stays running and serves .well-known/acme-challenge
            if docker compose run --rm --entrypoint sh certbot -c "test -f /etc/letsencrypt/live/nostrarabia.com/fullchain.pem" 2>/dev/null; then
              echo "SSL certificates already exist, skipping generation"
            else
              echo "Generating SSL certificates using webroot mode..."

              # Generate certificates using webroot mode (nginx serves the challenges)
              docker compose run --rm certbot certonly \
                --webroot \
                --webroot-path=/var/www/certbot \
                --email admin@nostrarabia.com \
                --agree-tos \
                --no-eff-email \
                --non-interactive \
                -d nostrarabia.com \
                -d relay.nostrarabia.com \
                -d media.nostrarabia.com

              if [ $? -eq 0 ]; then
                echo "SSL certificates generated successfully"
              else
                echo "Certificate generation failed. Check logs:"
                docker compose logs certbot
                exit 1
              fi
            fi

            # Wait for nginx to be healthy with timeout
            echo "Waiting for nginx to be healthy..."
            WAIT_TIME=0
            MAX_WAIT=60  # 1 minute max
            until [ "$(docker inspect --format='{{.State.Health.Status}}' nginx-proxy 2>/dev/null || echo 'starting')" = "healthy" ]; do
              if [ $WAIT_TIME -ge $MAX_WAIT ]; then
                echo " timeout!"
                echo "Nginx failed to become healthy. Checking status..."
                docker compose ps
                echo ""
                echo "Nginx logs:"
                docker compose logs --tail=50 nginx
                echo ""
                echo "Testing nginx config:"
                docker compose exec nginx nginx -t || true
                exit 1
              fi
              sleep 2
              WAIT_TIME=$((WAIT_TIME + 2))
              echo -n "."
            done
            echo " healthy!"

            # Reload nginx to pick up any new certificates
            echo "Reloading nginx configuration..."
            docker compose exec nginx nginx -s reload

            echo "Deployment complete! Services are running with HTTPS."
